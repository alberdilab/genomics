from pathlib import Path

# Detect reads
SAMPLES = sorted({f.stem.rsplit("_", 1)[0] for f in Path("resources/reads").glob("*_1.fq.gz")})

# Detect reference genome
ref_hits = sorted(Path("resources/reference").glob("*.fna.gz"))

if not ref_hits:
    sys.exit("❌  No .fna.gz reference found in resources/reference")
if len(ref_hits) > 1:
    sys.exit(f"❌  More than one .fna.gz reference found: {', '.join(map(str, ref_hits))}")

REF_FASTA_GZ = ref_hits[0]

# Generate output
rule all:
    input:
        "results/genotypes/all.vcf.gz"

# Rules
rule fastp:
    input:
        sample=["resources/reads/{sample}_1.fq.gz", "resources/reads/{sample}_2.fq.gz"]
    output:
        trimmed=["results/fastp/{sample}_1.fq.gz", "results/fastp/{sample}_2.fq.gz"],
        html="results/fastp/{sample}.html",
        json="results/fastp/{sample}.json"
    log:
        "logs/fastp/{sample}.log"
    params:
        adapters="--adapter_sequence AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2 AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT",
        extra="--trim_poly_g --trim_poly_g --trim_poly_x --low_complexity_filter --n_base_limit 5 --qualified_quality_phred 20 --length_required 60"
    threads: 4
    resources:
        mem_mb=lambda wildcards, input, attempt: max(8*1024, int(input.size_mb * 5) * 2 ** (attempt - 1)),
        runtime=lambda wildcards, input, attempt: max(15, int(input.size_mb / 1024 * 3) * 2 ** (attempt - 1))
    wrapper:
        "v7.2.0/bio/fastp"

rule decompress_reference:
    input:
        REF_FASTA_GZ
    output:
        "resources/reference/reference.fna"
    shell:
        "gunzip -c {input} > {output}"

rule bowtie2_build:
    input:
        ref="resources/reference/reference.fna"
    output:
        multiext(
            "resources/reference/reference",
            ".1.bt2",
            ".2.bt2",
            ".3.bt2",
            ".4.bt2",
            ".rev.1.bt2",
            ".rev.2.bt2",
        )
    log:
        "logs/bowtie2_build/bowtie2_build.log"
    threads: 1
    resources:
        mem_mb=lambda wildcards, input, attempt: max(8*1024, int(input.size_mb * 10) * 2 ** (attempt - 1)),
        runtime=lambda wildcards, input, attempt: max(15, int(input.size_mb / 20) * 2 ** (attempt - 1))
    wrapper:
        "v7.2.0/bio/bowtie2/build"

rule create_dict:
    input:
        "resources/reference/reference.fna"
    output:
        "resources/reference/reference.dict"
    log:
        "logs/picard/create_dict.log"
    threads: 1
    resources:
        mem_mb=lambda wildcards, input, attempt: max(8*1024, int(input.size_mb * 10) * 2 ** (attempt - 1)),
        runtime=lambda wildcards, input, attempt: max(15, int(input.size_mb / 20) * 2 ** (attempt - 1))
    wrapper:
        "v7.2.0/bio/picard/createsequencedictionary"

rule bowtie2:
    input:
        sample=["results/fastp/{sample}_1.fq.gz", "results/fastp/{sample}_2.fq.gz"],
        idx=multiext(
            "resources/reference/reference",
            ".1.bt2",
            ".2.bt2",
            ".3.bt2",
            ".4.bt2",
            ".rev.1.bt2",
            ".rev.2.bt2",
        )
    output:
        "results/bowtie2/{sample}.bam"
    log:
        "logs/bowtie2/{sample}.log"
    threads: 16
    resources:
        mem_mb=lambda wildcards, input, attempt: max(8*1024, int(input.size_mb * 5) * 2 ** (attempt - 1)),
        runtime=lambda wildcards, input, attempt: max(15, int(input.size_mb / 20) * 2 ** (attempt - 1))
    wrapper:
        "v7.2.0/bio/bowtie2/align"

rule replace_rg:
    input:
        "results/bowtie2/{sample}.bam"
    output:
        "results/replace_rg/{sample}.bam"
    log:
        "logs/replace_rg/{sample}.log",
    params:
        extra="--RGLB lib1 --RGPL illumina --RGPU {sample} --RGSM {sample}"
    resources:
        mem_mb=1024,
        runtime=6 * 60
    wrapper:
        "v7.2.0/bio/picard/addorreplacereadgroups"

rule samtools_sort:
    input:
        "results/replace_rg/{sample}.bam",
    output:
        "results/sorted/{sample}.bam",
    log:
        "logs/sort/{sample}.log",
    params:
        extra="-m 64G"
    threads: 1
    resources:
        mem_mb=64 * 1024,
        runtime=6 * 60
    wrapper:
        "v7.2.0/bio/samtools/sort"

rule picard:
    input:
        bams="results/sorted/{sample}.bam"
    output:
        bam="results/picard/{sample}.bam",
        metrics="results/picard/{sample}.tsv"
    log:
        "logs/picard/{sample}.log"
    params:
        extra="--REMOVE_DUPLICATES true"
    threads: 24
    resources:
        mem_mb=8 * 1024,
        runtime=6 * 60
    wrapper:
        "v7.2.0/bio/picard/markduplicates"

rule samtools_index:
    input:
        "results/picard/{sample}.bam"
    output:
        "results/picard/{sample}.bai"
    log:
        "logs/samtools_index/{sample}.log",
    threads: 4
    wrapper:
        "v7.2.0/bio/samtools/index"

rule samtools_faidx:
    input:
        "resources/reference/reference.fna",
    output:
        "resources/reference/reference.fna.fai"
    log:
        "logs/faidx/reference.log"
    wrapper:
        "v7.2.0/bio/samtools/faidx"

checkpoint create_regions:
    input:
        "resources/reference/reference.fna"
    output:
        "resources/reference/reference.bed"
    log:
        "logs/regions/regions.log"
    resources:
        mem_mb=8 * 1024,
        runtime=1 * 60
    conda:
        "envs/seqkit.yml"
    shell:
        """
        seqkit fx2tab -l -n {input} \
          | awk '{{print $1"\t0\t"$2"\t"$1}}' \
          > {output}
        """

def region_list(wildcards):
    bed = checkpoints.create_regions.get().output[0]
    regions = []
    with open(bed) as fh:
        for chrom, start, end, *_ in map(str.split, fh):
            regions.append(f"{chrom}")
    return regions

rule bcftools:
    input:
        bam=expand("results/picard/{sample}.bam", sample=SAMPLES),
        bai=expand("results/picard/{sample}.bai", sample=SAMPLES),
        fasta="resources/reference/reference.fna",
        fai="resources/reference/reference.fna.fai"
    output:
        "resources/reference/regions/{region}.bcf"
    log:
        "logs/bcftools/{region}.log"
    resources:
        mem_mb=64 * 1024,
        runtime=24 * 60
    conda:
        "envs/bcftools.yml"
    shell:
        """
        ( bcftools mpileup \
            --fasta-ref {input.fasta} \
            --output-type u \
            --region {wildcards.region} \
            {input.bam} \
        | bcftools call \
            --multiallelic-caller \
            --variants-only \
            --output-type u \
        | bcftools filter \
            --include 'QUAL > 30' \
            --output-type b \
            --output {output} \
        ) 2> {log}
        """

rule bcftools_concat:
    input:
        calls=expand("resources/reference/regions/{region}.bcf",region=region_list)
    output:
        "resources/reference/reference.vcf.gz"
    log:
        "logs/bcftools_concat/bcftools_concat.log",
    params:
        extra=""
    threads: 4
    resources:
        mem_mb=64 * 1024,
        runtime=6 * 60
    wrapper:
        "v7.2.0/bio/bcftools/concat"

rule IndexFeatureFile:
    input:
        "resources/reference/reference.vcf.gz"
    output:
        "resources/reference/reference.vcf.gz.tbi"
    log:
        "logs/bcftools/IndexFeatureFile.log"
    resources:
        mem_mb=64 * 1024,
        runtime=24 * 60
    conda:
        "envs/gatk.yml"
    shell:
        """
        gatk IndexFeatureFile --input {input}
        """

rule gatk_baserecalibrator:
    input:
        bam="results/picard/{sample}.bam",
        ref="resources/reference/reference.fna",
        dict="resources/reference/reference.dict",
        known="resources/reference/reference.vcf.gz",
        index="resources/reference/reference.vcf.gz.tbi"
    output:
        recal_table="results/recal/{sample}.grp",
    log:
        "logs/baserecalibrator/{sample}.log",
    resources:
        mem_mb=8 * 1024,
        runtime=24 * 60
    wrapper:
        "v7.2.0/bio/gatk/baserecalibrator"

rule gatk_applybqsr:
    input:
        bam="results/picard/{sample}.bam",
        ref="resources/reference/reference.fna",
        dict="resources/reference/reference.dict",
        recal_table="results/recal/{sample}.grp"
    output:
        bam="results/recal/{sample}.bam"
    log:
        "logs/gatk_applybqsr/{sample}.log",
    params:
        extra="",  # optional
        java_opts="",  # optional
        embed_ref=True,  # embed the reference in cram output
    resources:
        mem_mb=8 * 1024,
        runtime=24 * 60
    wrapper:
        "v7.2.0/bio/gatk/applybqsr"

rule haplotype_caller_gvcf:
    input:
        bam="results/recal/{sample}.bam",
        ref="resources/reference/reference.fna",
        fai="resources/reference/reference.fna.fai",
        dict="resources/reference/reference.dict"
    output:
        gvcf="results/haplotypecaller/{sample}.gvcf.gz"
    log:
        "logs/haplotypecaller/{sample}.log"
    params:
        extra="",
        java_opts=""
    threads: 4
    resources:
        mem_mb=8 * 1024,
        runtime=24 * 60
    wrapper:
        "v7.2.0/bio/gatk/haplotypecaller"

rule combine_gvcfs:
    input:
        gvcfs = lambda wc: expand(
            "results/haplotypecaller/{sample}.gvcf.gz",
            sample = SAMPLES),
        ref="resources/reference/reference.fna"
    output:
        gvcf="results/genotypes/all.vcf.gz"
    log:
        "logs/gcombinegvcfs/gcombinegvcfs.log"
    resources:
        mem_mb=16 * 1024,
        runtime=24 * 60
    wrapper:
        "v7.2.0/bio/gatk/combinegvcfs"
